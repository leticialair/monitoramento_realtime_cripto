version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - crypto-net

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    # healthcheck:
    #   test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
    #   interval: 5s
    #   timeout: 10s
    #   retries: 10
    networks:
      - crypto-net

  producer:
    build: ./producer
    container_name: producer
    depends_on:
      - kafka
        # condition: service_healthy
    volumes:
      - ./producer:/app
    # restart: unless-stopped
    networks:
      - crypto-net

  consumer:
    build: ./consumer
    container_name: consumer
    depends_on:
      - kafka
        # condition: service_healthy
    volumes:
      - ./consumer:/app
    # restart: unless-stopped
    networks:
      - crypto-net

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - crypto-net

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: teste@teste.com.br
      PGADMIN_DEFAULT_PASSWORD: teste123
    ports:
      - "5050:80"
    depends_on:
      - postgres
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      # - postgres_data:/var/lib/postgresql/data
      # - pgadmin_data:/var/lib/pgadmin/sessions
    restart: always
    networks:
      - crypto-net

  airflow-setup:
    image: apache/airflow:2.8.0
    container_name: airflow-setup
    depends_on:
      - postgres
    volumes:
      - ./airflow/dags:/opt/airflow/dags
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/postgres
      AIRFLOW__LOGGING__LOGGING_AUTHENTICATE: "False"
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
    command: >
      bash -c "
        airflow db migrate &&
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com
      "
    networks:
      - crypto-net

  airflow-webserver:
    image: apache/airflow:2.8.0
    container_name: airflow-webserver
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - airflow-setup
    volumes:
      - ./airflow/dags:/opt/airflow/dags
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/postgres
      AIRFLOW_CONN_POSTGRES_DEFAULT: postgresql+psycopg2://postgres:postgres@postgres:5432/postgres
      AIRFLOW__LOGGING__LOGGING_AUTHENTICATE: "False"
    command: webserver
    networks:
      - crypto-net

  airflow-scheduler:
    image: apache/airflow:2.8.0
    container_name: airflow-scheduler
    restart: always
    depends_on:
      - airflow-webserver
    volumes:
      - ./airflow/dags:/opt/airflow/dags
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/postgres
      AIRFLOW_CONN_POSTGRES_DEFAULT: postgresql+psycopg2://postgres:postgres@postgres:5432/postgres
      AIRFLOW__LOGGING__LOGGING_AUTHENTICATE: "False"
    command: scheduler
    networks:
      - crypto-net

  metabase:
    image: metabase/metabase:v0.50.10
    ports:
      - "3003:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: postgres
      MB_DB_PORT: 5432
      MB_DB_USER: postgres
      MB_DB_PASS: postgres
      MB_DB_HOST: postgres
    restart: always
    networks:
      - crypto-net

volumes:
  postgres_data:

networks:
  crypto-net:
    driver: bridge